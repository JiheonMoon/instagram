자바스크립스 에서의 함수
- 일련의 처리를 하나로 모아 언제든 호출할수 있도록 만들어놓은것
- 수학의 함수와 비슷
- 함수의 입력값을 인수, 함수의 출력값을 반환값

function method(a,b){
	let c= a+b;
	return c;
}

1.매개변수 o 반환 x
2.매개변수 x 반환 x
3.매개변수 o 반환 o
4.매개변수 x 반환 o

함수의 흐름
- 호출된 코드에 있는 인자가 함수의 매개변수에 대입된다
- 함수의 코드블럭 안에 있는 코드들이 순차적으로 실행
- return문이 실행되면 호출한곳으로 돌아간다.

함수의 호이스팅
- 자바스크립트 엔진은 변수 선언문과 마찬가지로 함수 선언문을 프로그램의 첫 머리로 끌어올림
- 따라서 함수 선언문은 어떤 프로그램 위치에서도 작성가능

JS를 HTML과 어떻게 사용할것인가?
HTML파일 안에 <script> ~ </script>

이벤트 핸들러 맛보기
정적인 마크업 언어에서 동적인 일이 일어나는것은 하나의 사건
버튼을 클릭하는것도 사건
빈칸에 글자 타이핑도 사건
이러한 사건을 JS에서는 이벤트라고 부름
onClick 클릭했을때 의미하는 속성
이때 수행되는 작업을 이벤트 핸들러

이벤트 처리를 위한 함수 표현
태그에 onclick 속성을 부여하여 이벤트를 처리하는 방법을 인라인 이벤트 모델이라고 부름

표준 이벤트 모델
인라인 이벤트 모델은 HTML에 기능적인 측면이 추가됨에 따라
'정보의 뼈대'만 제공한다는 HTML의 철학이 무너진다
따라서 협업을 하는 다른 개발자가 기능의 수정을 위해 굳이 정보 위주의 문서인
HTML파일을 열어봐야 한다는 문제가 있다

자바스크립트 활용시 주의 사항
자바스크립트 코드를 별도의 파일로 분리하기
html도 위에서 아래로 실해오디기 때문에 아직 만들어지지 않은 html요소에 대해서 읽어올수 없다

js에게 html코드가 모두 실행되면 그때 너의 코드를 실행해줘
이와 같은 방식을 비동기처리라고 부름

동기처리는 하나의 작업이 끝나는 즉시 다음 명령을 처리함
덕분에 아직 html요소가 만들어지지 않은 상태에서 요소의 기능을 추가하라는 상황이 벌어짐

반면 비동기 처리는 지금 당장 처리해야 할 명령과 나중에 처리할 명령을 구분함

태그를 못찾는 경우
1. <script>를 태그 아래로 내림
2. 인라인 이벤트 모델만 사용
3. DOMContentLoaded 이벤트 활용